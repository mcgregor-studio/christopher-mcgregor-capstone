{"ast":null,"code":"var _jsxFileName = \"U:\\\\CAREER\\\\BrainStation\\\\Projects\\\\christopher-mcgregor-capstone\\\\client\\\\src\\\\components\\\\Main\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport PaintTools from \"../PaintTools/PaintTools\";\nimport Button from \"../Button/Button\";\nimport \"./Main.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  //Setting initial state and references for canvas\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  let [brushActive, setBrushActive] = useState(true);\n  let [eraserActive, setEraserActive] = useState(false);\n  let [isDrawing, setIsDrawing] = useState(false);\n  let [strokeStyle, setStrokeStyle] = useState(\"black\");\n  let [lineWidth, setLineWidth] = useState(3);\n  let [eraserWidth, setEraserWidth] = useState(3);\n  let [undo, setUndo] = useState(false);\n  let [redo, setRedo] = useState(false);\n  let [undoArr, setUndoArr] = useState([]);\n  let [redoArr, setRedoArr] = useState([]);\n  let [clearCanvas, setClearCanvas] = useState(false);\n  let [loadImage, setLoadImage] = useState(false);\n  let [saveImage, setSaveImage] = useState(false); //useEffect hook for canvas and tools\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = lineWidth;\n    ctx.eraserWidth = eraserWidth;\n    ctx.imageSmoothingEnabled = false;\n    ctxRef.current = ctx;\n  }, [strokeStyle, lineWidth, eraserWidth]); //Get mouse location to keep mouse position in canvas on resize\n\n  let mx = 0;\n  let my = 0;\n\n  const getMouse = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    let scaleX = canvas.width / rect.width;\n    let scaleY = canvas.height / rect.height;\n    mx = (event.clientX - rect.left) * scaleX;\n    my = (event.clientY - rect.top) * scaleY;\n  }; //Undo & redo\n\n\n  let points = [];\n\n  if (undo) {\n    const canvas = canvasRef.current;\n    const ctx = ctxRef.current;\n    let removeLastStroke = undoArr.splice(-1, 1);\n    console.log(removeLastStroke);\n    setUndoArr(removeLastStroke);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    undoArr.forEach(path => {\n      ctx.beginPath();\n      ctx.moveTo(path[0].x, path[0].y);\n\n      for (let i = 1; i < path.length; i++) {\n        ctx.lineTo(path[i].x, path[i].y);\n      }\n\n      ctx.stroke();\n    });\n    setUndo(false);\n  } //Start drawing function\n\n\n  const startDraw = event => {\n    if (redoArr.length > 0) {\n      setRedoArr([]);\n    }\n\n    getMouse(event);\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(mx, my);\n    setIsDrawing(true);\n  }; //End drawing function\n\n\n  const endDraw = event => {\n    getMouse(event);\n    ctxRef.current.closePath();\n    setUndoArr([...undoArr, points]);\n    console.log(undoArr);\n    points = [];\n    setIsDrawing(false);\n  }; //Drawing function\n\n\n  const draw = event => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const ctx = ctxRef.current;\n    getMouse(event);\n\n    if (brushActive) {\n      points.push({\n        x: mx,\n        y: my,\n        mode: \"draw\"\n      });\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.strokeStyle = strokeStyle;\n      ctx.lineTo(mx, my);\n      ctx.stroke();\n    }\n\n    if (eraserActive) {\n      points.push({\n        x: mx,\n        y: my,\n        mode: \"erase\"\n      });\n      ctx.globalCompositeOperation = \"destination-out\";\n      ctx.strokeStyle = \"rgba(255,255,255,1)\";\n      ctx.lineTo(mx, my);\n      ctx.stroke();\n    }\n  };\n\n  const dot = event => {\n    getMouse(event);\n    const ctx = ctxRef.current;\n\n    if (brushActive) {\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.strokeStyle = strokeStyle;\n    }\n\n    if (eraserActive) {\n      ctx.globalCompositeOperation = \"destination-out\";\n      ctx.strokeStyle = \"rgba(255,255,255,1)\";\n    }\n\n    ctx.beginPath();\n    ctx.moveTo(mx, my);\n    ctx.lineTo(mx, my);\n    ctx.stroke();\n  }; //Loading and saving image handlers\n\n\n  const handleLoadImage = () => {\n    setLoadImage(true);\n  };\n\n  const handleSaveImage = () => {\n    setSaveImage(true);\n  }; //Clear canvas\n\n\n  if (clearCanvas) {\n    const canvas = canvasRef.current;\n    const ctx = ctxRef.current;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    setClearCanvas(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"homepage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"homepage__canvas\",\n        ref: canvasRef,\n        onMouseDown: startDraw,\n        onMouseUp: endDraw,\n        onMouseMove: draw,\n        onClick: dot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PaintTools, {\n        setBrushActive: setBrushActive,\n        setEraserActive: setEraserActive,\n        setLineWidth: setLineWidth,\n        setStrokeStyle: setStrokeStyle,\n        setEraserWidth: setEraserWidth,\n        setClearCanvas: setClearCanvas,\n        setUndo: setUndo,\n        setRedo: setRedo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleLoadImage,\n        className: \"homepage__button--load\",\n        text: \"Load Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSaveImage,\n        className: \"homepage__button--save\",\n        text: \"Save Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"TSNU9PT/GxyVhMSJNBbvVoHYJYs=\");\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["U:/CAREER/BrainStation/Projects/christopher-mcgregor-capstone/client/src/components/Main/Main.js"],"names":["React","useRef","useEffect","useState","PaintTools","Button","Main","canvasRef","ctxRef","brushActive","setBrushActive","eraserActive","setEraserActive","isDrawing","setIsDrawing","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","eraserWidth","setEraserWidth","undo","setUndo","redo","setRedo","undoArr","setUndoArr","redoArr","setRedoArr","clearCanvas","setClearCanvas","loadImage","setLoadImage","saveImage","setSaveImage","canvas","current","ctx","getContext","lineCap","lineJoin","imageSmoothingEnabled","mx","my","getMouse","event","rect","getBoundingClientRect","scaleX","width","scaleY","height","clientX","left","clientY","top","points","removeLastStroke","splice","console","log","clearRect","forEach","path","beginPath","moveTo","x","y","i","length","lineTo","stroke","startDraw","endDraw","closePath","draw","push","mode","globalCompositeOperation","dot","handleLoadImage","handleSaveImage"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport PaintTools from \"../PaintTools/PaintTools\";\r\nimport Button from \"../Button/Button\";\r\nimport \"./Main.scss\";\r\n\r\nexport default function Main() {\r\n  //Setting initial state and references for canvas\r\n  const canvasRef = useRef(null);\r\n  const ctxRef = useRef(null);\r\n  let [brushActive, setBrushActive] = useState(true);\r\n  let [eraserActive, setEraserActive] = useState(false);\r\n  let [isDrawing, setIsDrawing] = useState(false);\r\n  let [strokeStyle, setStrokeStyle] = useState(\"black\");\r\n  let [lineWidth, setLineWidth] = useState(3);\r\n  let [eraserWidth, setEraserWidth] = useState(3);\r\n  let [undo, setUndo] = useState(false);\r\n  let [redo, setRedo] = useState(false);\r\n  let [undoArr, setUndoArr] = useState([]);\r\n  let [redoArr, setRedoArr] = useState([]);\r\n  let [clearCanvas, setClearCanvas] = useState(false);\r\n  let [loadImage, setLoadImage] = useState(false);\r\n  let [saveImage, setSaveImage] = useState(false);\r\n\r\n  //useEffect hook for canvas and tools\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.lineCap = \"round\";\r\n    ctx.lineJoin = \"round\";\r\n    ctx.strokeStyle = strokeStyle;\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.eraserWidth = eraserWidth;\r\n    ctx.imageSmoothingEnabled = false;\r\n    ctxRef.current = ctx;\r\n  }, [strokeStyle, lineWidth, eraserWidth]);\r\n\r\n  //Get mouse location to keep mouse position in canvas on resize\r\n  let mx = 0;\r\n  let my = 0;\r\n  const getMouse = (event) => {\r\n    const canvas = canvasRef.current;\r\n    const rect = canvas.getBoundingClientRect();\r\n    let scaleX = canvas.width / rect.width;\r\n    let scaleY = canvas.height / rect.height;\r\n    mx = (event.clientX - rect.left) * scaleX;\r\n    my = (event.clientY - rect.top) * scaleY;\r\n  };\r\n\r\n  //Undo & redo\r\n  let points = [];\r\n  if (undo) {\r\n    const canvas = canvasRef.current;\r\n    const ctx = ctxRef.current;\r\n    let removeLastStroke = undoArr.splice(-1, 1)\r\n    console.log(removeLastStroke)\r\n    setUndoArr(removeLastStroke);\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    undoArr.forEach(path=>{\r\n      ctx.beginPath();\r\n      ctx.moveTo(path[0].x,path[0].y);  \r\n      for(let i = 1; i < path.length; i++){\r\n        ctx.lineTo(path[i].x,path[i].y); \r\n      }\r\n        ctx.stroke();\r\n      })\r\n    setUndo(false)\r\n  }\r\n\r\n  //Start drawing function\r\n  const startDraw = (event) => {\r\n    if (redoArr.length > 0) {\r\n      setRedoArr([]);\r\n    }\r\n    getMouse(event);\r\n    ctxRef.current.beginPath();\r\n    ctxRef.current.moveTo(mx, my);\r\n    setIsDrawing(true);\r\n  };\r\n\r\n  //End drawing function\r\n  const endDraw = (event) => {\r\n    getMouse(event);\r\n    ctxRef.current.closePath();\r\n    setUndoArr([...undoArr, points]);\r\n    console.log(undoArr)\r\n    points = [];\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  //Drawing function\r\n  const draw = (event) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    const ctx = ctxRef.current;\r\n    getMouse(event);\r\n    if (brushActive) {\r\n      points.push({x: mx, y: my, mode: \"draw\"})\r\n      ctx.globalCompositeOperation = \"source-over\";\r\n      ctx.strokeStyle = strokeStyle;\r\n      ctx.lineTo(mx, my);\r\n      ctx.stroke();\r\n    }\r\n    if (eraserActive) {\r\n      points.push({x: mx, y: my, mode: \"erase\"})\r\n      ctx.globalCompositeOperation = \"destination-out\";\r\n      ctx.strokeStyle = \"rgba(255,255,255,1)\";\r\n      ctx.lineTo(mx, my);\r\n      ctx.stroke();\r\n    }\r\n\r\n  };\r\n\r\n  const dot = (event) => {\r\n    getMouse(event);\r\n    const ctx = ctxRef.current;\r\n    if (brushActive) {\r\n      ctx.globalCompositeOperation = \"source-over\";\r\n      ctx.strokeStyle = strokeStyle;\r\n    }\r\n    if (eraserActive) {\r\n      ctx.globalCompositeOperation = \"destination-out\";\r\n      ctx.strokeStyle = \"rgba(255,255,255,1)\";\r\n    }\r\n    ctx.beginPath();\r\n    ctx.moveTo(mx, my);\r\n    ctx.lineTo(mx, my);\r\n    ctx.stroke();\r\n  };\r\n\r\n  //Loading and saving image handlers\r\n  const handleLoadImage = () => {\r\n    setLoadImage(true);\r\n\r\n  };\r\n\r\n  const handleSaveImage = () => {\r\n    setSaveImage(true);\r\n  };\r\n\r\n  //Clear canvas\r\n  if (clearCanvas) {\r\n    const canvas = canvasRef.current;\r\n    const ctx = ctxRef.current;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    setClearCanvas(false);\r\n  }\r\n\r\n  return (\r\n    <section className=\"homepage\">\r\n      <div>\r\n        <canvas\r\n          className=\"homepage__canvas\"\r\n          ref={canvasRef}\r\n          onMouseDown={startDraw}\r\n          onMouseUp={endDraw}\r\n          onMouseMove={draw}\r\n          onClick={dot}\r\n        ></canvas>\r\n        <PaintTools\r\n          setBrushActive={setBrushActive}\r\n          setEraserActive={setEraserActive}\r\n          setLineWidth={setLineWidth}\r\n          setStrokeStyle={setStrokeStyle}\r\n          setEraserWidth={setEraserWidth}\r\n          setClearCanvas={setClearCanvas}\r\n          setUndo={setUndo}\r\n          setRedo={setRedo}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Button\r\n          onClick={handleLoadImage}\r\n          className=\"homepage__button--load\"\r\n          text=\"Load Image\"\r\n        />\r\n        <Button\r\n          onClick={handleSaveImage}\r\n          className=\"homepage__button--save\"\r\n          text=\"Save Image\"\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}