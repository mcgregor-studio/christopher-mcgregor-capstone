{"ast":null,"code":"var _jsxFileName = \"U:\\\\CAREER\\\\BrainStation\\\\Projects\\\\christopher-mcgregor-capstone\\\\client\\\\src\\\\components\\\\Main\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport PaintTools from \"../PaintTools/PaintTools\";\nimport Button from \"../Button/Button\";\nimport \"./Main.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  //Setting initial state and references for canvas\n  const canvasRef = useRef(null);\n  const coloursRef = useRef(null);\n  const ctxRef = useRef(null);\n  let [isDrawing, setIsDrawing] = useState(false);\n  let [strokeStyle, setStrokeStyle] = useState(\"black\");\n  let [lineWidth, setLineWidth] = useState(3);\n  let [eraserWidth, setEraserWidth] = useState(3);\n  let [clearCanvas, setClearCanvas] = useState(false);\n  let [loadImage, setLoadImage] = useState(false);\n  let [saveImage, setSaveImage] = useState(false); //useEffect hook for canvas and tools\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    /*     ctx.canvas.width = window.innerWidth - 80;\r\n        ctx.canvas.height = window.innerWidth / 2; */\n\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = lineWidth;\n    ctx.imageSmoothingEnabled = false;\n    ctxRef.current = ctx;\n  }, [strokeStyle, lineWidth]); //Get mouse location to keep mouse position in canvas on resize\n\n  let mx = 0;\n  let my = 0;\n\n  const getMouse = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    let scaleX = canvas.width / rect.width;\n    let scaleY = canvas.height / rect.height;\n    mx = (event.clientX - rect.left) * scaleX;\n    my = (event.clientY - rect.top) * scaleY;\n  }; //Start drawing function\n\n\n  const startDraw = event => {\n    getMouse(event);\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(mx, my);\n    setIsDrawing(true);\n  }; //End drawing function\n\n\n  const endDraw = event => {\n    getMouse(event);\n    ctxRef.current.closePath();\n    setIsDrawing(false);\n  }; //Drawing function\n\n\n  const draw = event => {\n    if (!isDrawing) {\n      return;\n    }\n\n    getMouse(event);\n    ctxRef.current.lineTo(mx, my);\n    ctxRef.current.stroke();\n  }; //Loading and saving image handlers\n\n\n  const handleLoadImage = () => {\n    setLoadImage(true);\n  };\n\n  const handleSaveImage = () => {\n    setSaveImage(true);\n  };\n\n  if (clearCanvas) {\n    const canvas = canvasRef.current;\n    const ctx = ctxRef.current;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    setClearCanvas(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"homepage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"homepage__canvas\",\n        ref: canvasRef,\n        onMouseDown: startDraw,\n        onMouseUp: endDraw,\n        onMouseMove: draw\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PaintTools, {\n        setLineWidth: setLineWidth,\n        setStrokeStyle: setStrokeStyle,\n        setEraserWidth: setEraserWidth,\n        setClearCanvas: setClearCanvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleLoadImage,\n        className: \"homepage__button--load\",\n        text: \"Load Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSaveImage,\n        className: \"homepage__button--save\",\n        text: \"Save Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"5rwTCr8f1PcyGEsQ8N4++dvJYMs=\");\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["U:/CAREER/BrainStation/Projects/christopher-mcgregor-capstone/client/src/components/Main/Main.js"],"names":["React","useRef","useEffect","useState","PaintTools","Button","Main","canvasRef","coloursRef","ctxRef","isDrawing","setIsDrawing","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","eraserWidth","setEraserWidth","clearCanvas","setClearCanvas","loadImage","setLoadImage","saveImage","setSaveImage","canvas","current","ctx","getContext","lineCap","lineJoin","imageSmoothingEnabled","mx","my","getMouse","event","rect","getBoundingClientRect","scaleX","width","scaleY","height","clientX","left","clientY","top","startDraw","beginPath","moveTo","endDraw","closePath","draw","lineTo","stroke","handleLoadImage","handleSaveImage","clearRect"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport PaintTools from \"../PaintTools/PaintTools\";\r\nimport Button from \"../Button/Button\";\r\nimport \"./Main.scss\";\r\n\r\nexport default function Main() {\r\n  //Setting initial state and references for canvas\r\n  const canvasRef = useRef(null);\r\n  const coloursRef = useRef(null);\r\n  const ctxRef = useRef(null);\r\n  let [isDrawing, setIsDrawing] = useState(false);\r\n  let [strokeStyle, setStrokeStyle] = useState(\"black\");\r\n  let [lineWidth, setLineWidth] = useState(3);\r\n  let [eraserWidth, setEraserWidth] = useState(3);\r\n  let [clearCanvas, setClearCanvas] = useState(false);\r\n  let [loadImage, setLoadImage] = useState(false);\r\n  let [saveImage, setSaveImage] = useState(false);\r\n\r\n  //useEffect hook for canvas and tools\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n/*     ctx.canvas.width = window.innerWidth - 80;\r\n    ctx.canvas.height = window.innerWidth / 2; */\r\n    ctx.lineCap = \"round\";\r\n    ctx.lineJoin = \"round\";\r\n    ctx.strokeStyle = strokeStyle;\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.imageSmoothingEnabled = false;\r\n    ctxRef.current = ctx;\r\n  }, [strokeStyle, lineWidth]);\r\n\r\n  //Get mouse location to keep mouse position in canvas on resize\r\n  let mx = 0;\r\n  let my = 0;\r\n  const getMouse = (event) => {\r\n    const canvas = canvasRef.current;\r\n    const rect = canvas.getBoundingClientRect();\r\n    let scaleX = canvas.width / rect.width;\r\n    let scaleY = canvas.height / rect.height;\r\n    mx = (event.clientX - rect.left) * scaleX;\r\n    my = (event.clientY - rect.top) * scaleY;\r\n  };\r\n\r\n  //Start drawing function\r\n  const startDraw = (event) => {\r\n    getMouse(event);\r\n    ctxRef.current.beginPath();\r\n    ctxRef.current.moveTo(mx, my);\r\n    setIsDrawing(true);\r\n  };\r\n\r\n  //End drawing function\r\n  const endDraw = (event) => {\r\n    getMouse(event);\r\n    ctxRef.current.closePath();\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  //Drawing function\r\n  const draw = (event) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    getMouse(event);\r\n    ctxRef.current.lineTo(mx, my);\r\n    ctxRef.current.stroke();\r\n  };\r\n\r\n  //Loading and saving image handlers\r\n  const handleLoadImage = () => {\r\n    setLoadImage(true);\r\n  };\r\n\r\n  const handleSaveImage = () => {\r\n    setSaveImage(true);\r\n  };\r\n\r\n  if (clearCanvas) {\r\n    const canvas = canvasRef.current;\r\n    const ctx = ctxRef.current;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    setClearCanvas(false);\r\n  }\r\n\r\n  return (\r\n    <section className=\"homepage\">\r\n      <div>\r\n        <canvas\r\n          className=\"homepage__canvas\"\r\n          ref={canvasRef}\r\n          onMouseDown={startDraw}\r\n          onMouseUp={endDraw}\r\n          onMouseMove={draw}\r\n        ></canvas>\r\n        <PaintTools\r\n          setLineWidth={setLineWidth}\r\n          setStrokeStyle={setStrokeStyle}\r\n          setEraserWidth={setEraserWidth}\r\n          setClearCanvas={setClearCanvas}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Button\r\n          onClick={handleLoadImage}\r\n          className=\"homepage__button--load\"\r\n          text=\"Load Image\"\r\n        />\r\n        <Button\r\n          onClick={handleSaveImage}\r\n          className=\"homepage__button--save\"\r\n          text=\"Save Image\"\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}