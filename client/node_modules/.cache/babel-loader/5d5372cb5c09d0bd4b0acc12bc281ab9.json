{"ast":null,"code":"var _jsxFileName = \"U:\\\\CAREER\\\\BrainStation\\\\Projects\\\\christopher-mcgregor-capstone\\\\client\\\\src\\\\components\\\\Main\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport PaintTools from \"../PaintTools/PaintTools\";\nimport Button from \"../Button/Button\";\nimport \"./Main.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  //Setting initial state and references for canvas\n  const canvasRef = useRef(null);\n  const coloursRef = useRef(null);\n  const ctxRef = useRef(null);\n  let [brushActive, setBrushActive] = useState(true);\n  let [eraserActive, setEraserActive] = useState(false);\n  let [isDrawing, setIsDrawing] = useState(false);\n  let [strokeStyle, setStrokeStyle] = useState(\"black\");\n  let [lineWidth, setLineWidth] = useState(3);\n  let [eraserWidth, setEraserWidth] = useState(3);\n  let [clearCanvas, setClearCanvas] = useState(false);\n  let [loadImage, setLoadImage] = useState(false);\n  let [saveImage, setSaveImage] = useState(false); //useEffect hook for canvas and tools\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = lineWidth;\n    ctx.imageSmoothingEnabled = false;\n    ctxRef.current = ctx;\n  }, [strokeStyle, lineWidth]); //Get mouse location to keep mouse position in canvas on resize\n\n  let mx = 0;\n  let my = 0;\n  let lastX = 0;\n  let lastY = 0;\n\n  const getMouse = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    let scaleX = canvas.width / rect.width;\n    let scaleY = canvas.height / rect.height;\n    mx = (event.clientX - rect.left) * scaleX;\n    my = (event.clientY - rect.top) * scaleY;\n  }; //Start drawing function\n\n\n  const startDraw = event => {\n    getMouse(event);\n    lastX = mx;\n    lastY = my;\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(mx, my);\n    setIsDrawing(true);\n  }; //End drawing function\n\n\n  const endDraw = event => {\n    getMouse(event);\n    ctxRef.current.closePath();\n    setIsDrawing(false);\n  }; //Drawing function\n\n\n  const draw = event => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const ctx = ctxRef.current;\n    getMouse(event);\n\n    if (brushActive) {\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.lineTo(mx, my);\n      ctx.stroke();\n    }\n\n    if (eraserActive) {\n      ctx.globalCompositeOperation = \"destination-out\";\n      ctx.arc(mx, my, eraserWidth / 2, 0, Math.PI * 2, false);\n      ctx.fill();\n    }\n  };\n\n  const dot = event => {\n    getMouse(event);\n    const ctx = ctxRef.current;\n\n    if (brushActive) {\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.beginPath();\n      ctx.moveTo(mx, my);\n      ctx.lineTo(mx, my);\n      ctx.stroke();\n    }\n\n    if (eraserActive) {\n      ctx.globalCompositeOperation = \"destination-out\";\n      ctx.arc(mx, my, eraserWidth / 2, 0, Math.PI * 2, false);\n      ctx.fill();\n    }\n  }; //Loading and saving image handlers\n\n\n  const handleLoadImage = () => {\n    setLoadImage(true);\n  };\n\n  const handleSaveImage = () => {\n    setSaveImage(true);\n  };\n\n  if (clearCanvas) {\n    const canvas = canvasRef.current;\n    const ctx = ctxRef.current;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    setClearCanvas(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"homepage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"homepage__canvas\",\n        ref: canvasRef,\n        onMouseDown: startDraw,\n        onMouseUp: endDraw,\n        onMouseMove: draw,\n        onClick: dot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PaintTools, {\n        setBrushActive: setBrushActive,\n        setEraserActive: setEraserActive,\n        setLineWidth: setLineWidth,\n        setStrokeStyle: setStrokeStyle,\n        setEraserWidth: setEraserWidth,\n        setClearCanvas: setClearCanvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleLoadImage,\n        className: \"homepage__button--load\",\n        text: \"Load Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSaveImage,\n        className: \"homepage__button--save\",\n        text: \"Save Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"NADukQsIPtfCWvNAFA+qxWJIOgc=\");\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["U:/CAREER/BrainStation/Projects/christopher-mcgregor-capstone/client/src/components/Main/Main.js"],"names":["React","useRef","useEffect","useState","PaintTools","Button","Main","canvasRef","coloursRef","ctxRef","brushActive","setBrushActive","eraserActive","setEraserActive","isDrawing","setIsDrawing","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","eraserWidth","setEraserWidth","clearCanvas","setClearCanvas","loadImage","setLoadImage","saveImage","setSaveImage","canvas","current","ctx","getContext","lineCap","lineJoin","imageSmoothingEnabled","mx","my","lastX","lastY","getMouse","event","rect","getBoundingClientRect","scaleX","width","scaleY","height","clientX","left","clientY","top","startDraw","beginPath","moveTo","endDraw","closePath","draw","globalCompositeOperation","lineTo","stroke","arc","Math","PI","fill","dot","handleLoadImage","handleSaveImage","clearRect"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport PaintTools from \"../PaintTools/PaintTools\";\r\nimport Button from \"../Button/Button\";\r\nimport \"./Main.scss\";\r\n\r\nexport default function Main() {\r\n  //Setting initial state and references for canvas\r\n  const canvasRef = useRef(null);\r\n  const coloursRef = useRef(null);\r\n  const ctxRef = useRef(null);\r\n  let [brushActive, setBrushActive] = useState(true);\r\n  let [eraserActive, setEraserActive] = useState(false);\r\n  let [isDrawing, setIsDrawing] = useState(false);\r\n  let [strokeStyle, setStrokeStyle] = useState(\"black\");\r\n  let [lineWidth, setLineWidth] = useState(3);\r\n  let [eraserWidth, setEraserWidth] = useState(3);\r\n  let [clearCanvas, setClearCanvas] = useState(false);\r\n  let [loadImage, setLoadImage] = useState(false);\r\n  let [saveImage, setSaveImage] = useState(false);\r\n\r\n  //useEffect hook for canvas and tools\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.lineCap = \"round\";\r\n    ctx.lineJoin = \"round\";\r\n    ctx.strokeStyle = strokeStyle;\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.imageSmoothingEnabled = false;\r\n    ctxRef.current = ctx;\r\n  }, [strokeStyle, lineWidth]);\r\n\r\n  //Get mouse location to keep mouse position in canvas on resize\r\n  let mx = 0;\r\n  let my = 0;\r\n  let lastX = 0;\r\n  let lastY = 0;\r\n  const getMouse = (event) => {\r\n    const canvas = canvasRef.current;\r\n    const rect = canvas.getBoundingClientRect();\r\n    let scaleX = canvas.width / rect.width;\r\n    let scaleY = canvas.height / rect.height;\r\n    mx = (event.clientX - rect.left) * scaleX;\r\n    my = (event.clientY - rect.top) * scaleY;\r\n  };\r\n\r\n  //Start drawing function\r\n  const startDraw = (event) => {\r\n    getMouse(event);\r\n    lastX = mx;\r\n    lastY = my;\r\n    ctxRef.current.beginPath();\r\n    ctxRef.current.moveTo(mx, my);\r\n    setIsDrawing(true);\r\n  };\r\n\r\n  //End drawing function\r\n  const endDraw = (event) => {\r\n    getMouse(event);\r\n    ctxRef.current.closePath();\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  //Drawing function\r\n  const draw = (event) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    const ctx = ctxRef.current;\r\n    getMouse(event);\r\n    if (brushActive) {\r\n      ctx.globalCompositeOperation = \"source-over\";\r\n      ctx.lineTo(mx, my);\r\n      ctx.stroke();\r\n    }\r\n    if (eraserActive) {\r\n      ctx.globalCompositeOperation = \"destination-out\";\r\n      ctx.arc(mx, my, eraserWidth / 2, 0, Math.PI * 2, false);\r\n      ctx.fill();\r\n    }\r\n  };\r\n\r\n  const dot = (event) => {\r\n    getMouse(event);\r\n    const ctx = ctxRef.current;\r\n    if (brushActive) {\r\n      ctx.globalCompositeOperation = \"source-over\";\r\n      ctx.beginPath();\r\n      ctx.moveTo(mx, my);\r\n      ctx.lineTo(mx, my);\r\n      ctx.stroke();\r\n    }\r\n    if (eraserActive) {\r\n      ctx.globalCompositeOperation = \"destination-out\";\r\n      ctx.arc(mx, my, eraserWidth / 2, 0, Math.PI * 2, false);\r\n      ctx.fill();\r\n    }\r\n  };\r\n\r\n  //Loading and saving image handlers\r\n  const handleLoadImage = () => {\r\n    setLoadImage(true);\r\n  };\r\n\r\n  const handleSaveImage = () => {\r\n    setSaveImage(true);\r\n  };\r\n\r\n  if (clearCanvas) {\r\n    const canvas = canvasRef.current;\r\n    const ctx = ctxRef.current;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    setClearCanvas(false);\r\n  }\r\n\r\n  return (\r\n    <section className=\"homepage\">\r\n      <div>\r\n        <canvas\r\n          className=\"homepage__canvas\"\r\n          ref={canvasRef}\r\n          onMouseDown={startDraw}\r\n          onMouseUp={endDraw}\r\n          onMouseMove={draw}\r\n          onClick={dot}\r\n        ></canvas>\r\n        <PaintTools\r\n          setBrushActive={setBrushActive}\r\n          setEraserActive={setEraserActive}\r\n          setLineWidth={setLineWidth}\r\n          setStrokeStyle={setStrokeStyle}\r\n          setEraserWidth={setEraserWidth}\r\n          setClearCanvas={setClearCanvas}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Button\r\n          onClick={handleLoadImage}\r\n          className=\"homepage__button--load\"\r\n          text=\"Load Image\"\r\n        />\r\n        <Button\r\n          onClick={handleSaveImage}\r\n          className=\"homepage__button--save\"\r\n          text=\"Save Image\"\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}