{"ast":null,"code":"var _jsxFileName = \"U:\\\\CAREER\\\\BrainStation\\\\Projects\\\\christopher-mcgregor-capstone\\\\client\\\\src\\\\components\\\\Main\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport PaintTools from \"../PaintTools/PaintTools\";\nimport Button from \"../Button/Button\";\nimport \"./Main.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  //Setting initial state and references for canvas\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const lineartRef = useRef(null);\n  const saveRef = useRef(null);\n  let [brushActive, setBrushActive] = useState(true);\n  let [eraserActive, setEraserActive] = useState(false);\n  let [isDrawing, setIsDrawing] = useState(false);\n  let [strokeStyle, setStrokeStyle] = useState(\"black\");\n  let [lineWidth, setLineWidth] = useState(3);\n  let [eraserWidth, setEraserWidth] = useState(3);\n  let [undo, setUndo] = useState(false);\n  let [undoArr, setUndoArr] = useState([]);\n  let [clearCanvas, setClearCanvas] = useState(false);\n  let [uploadImage, setUploadImage] = useState(false);\n  let [imageSource, setImageSource] = useState(\"\");\n  let [saveImage, setSaveImage] = useState(false); //useEffect hook for canvas and tools\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = lineWidth;\n    ctx.eraserWidth = eraserWidth;\n    ctx.imageSmoothingEnabled = false;\n    ctxRef.current = ctx;\n  }, [strokeStyle, lineWidth, eraserWidth]); //Get mouse location to keep mouse position in canvas on resize\n\n  let mx = 0;\n  let my = 0;\n\n  const getMouse = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    let scaleX = canvas.width / rect.width;\n    let scaleY = canvas.height / rect.height;\n    mx = (event.clientX - rect.left) * scaleX;\n    my = (event.clientY - rect.top) * scaleY;\n  }; //Undo if statement\n\n\n  let points = [];\n\n  if (undo) {\n    const canvas = canvasRef.current;\n    const ctx = ctxRef.current;\n    setUndoArr(undoArr.splice(-1, 1));\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    undoArr.forEach(path => {\n      if (path[0].mode === \"draw\") {\n        ctx.globalCompositeOperation = \"source-over\";\n        ctx.strokeStyle = path.stroke;\n        ctx.beginPath();\n        ctx.moveTo(path[0].x, path[0].y);\n\n        for (let i = 1; i < path.length; i++) {\n          ctx.lineTo(path[i].x, path[i].y);\n        }\n\n        ctx.stroke();\n      }\n\n      if (path[0].mode === \"erase\") {\n        ctx.globalCompositeOperation = \"destination-out\";\n        ctx.strokeStyle = \"rgba(255,255,255,1)\";\n\n        for (let i = 1; i < path.length; i++) {\n          ctx.lineTo(path[i].x, path[i].y);\n        }\n\n        ctx.stroke();\n      }\n    });\n    setUndo(false);\n  } //Start drawing function\n\n\n  const startDraw = event => {\n    getMouse(event);\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(mx, my);\n    setIsDrawing(true);\n  }; //End drawing function\n\n\n  const endDraw = event => {\n    getMouse(event);\n    ctxRef.current.closePath();\n    setUndoArr([...undoArr, points]);\n    console.log(undoArr);\n    points = [];\n    setIsDrawing(false);\n  }; //Drawing function\n\n\n  const draw = event => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const ctx = ctxRef.current;\n    getMouse(event);\n\n    if (brushActive) {\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.strokeStyle = strokeStyle;\n      points.push({\n        x: mx,\n        y: my,\n        mode: \"draw\",\n        stroke: ctx.strokeStyle\n      });\n      ctx.lineTo(mx, my);\n      ctx.stroke();\n    }\n\n    if (eraserActive) {\n      points.push({\n        x: mx,\n        y: my,\n        mode: \"erase\"\n      });\n      ctx.globalCompositeOperation = \"destination-out\";\n      ctx.strokeStyle = \"rgba(255,255,255,1)\";\n      ctx.lineTo(mx, my);\n      ctx.stroke();\n    }\n  };\n\n  const dot = event => {\n    getMouse(event);\n    const ctx = ctxRef.current;\n\n    if (brushActive) {\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.strokeStyle = strokeStyle;\n    }\n\n    if (eraserActive) {\n      ctx.globalCompositeOperation = \"destination-out\";\n      ctx.strokeStyle = \"rgba(255,255,255,1)\";\n    }\n\n    ctx.beginPath();\n    ctx.moveTo(mx, my);\n    ctx.lineTo(mx, my);\n    ctx.stroke();\n  }; //Loading and saving image handlers\n\n\n  const handleUploadImage = event => {\n    console.log(\"fired\");\n    setImageSource(URL.createObjectURL(event.target.files[0]));\n    setUploadImage(true);\n  };\n\n  const handleDownloadImage = () => {\n    setUploadImage(true);\n  };\n\n  const handleSaveImage = () => {\n    setSaveImage(true);\n  }; //Upload image\n\n\n  if (uploadImage) {\n    const lineart = lineartRef.current;\n    const lineCtx = lineart.getContext(\"2d\");\n    let img = new Image();\n\n    img.onload = () => {\n      let hRatio = lineart.width / img.width;\n      let vRatio = lineart.height / img.height;\n      let ratio = Math.min(hRatio, vRatio);\n      var centerShift_x = (lineart.width - img.width * ratio) / 2;\n      var centerShift_y = (lineart.height - img.height * ratio) / 2;\n      lineCtx.clearRect(0, 0, lineart.width, lineart.height);\n      lineCtx.drawImage(img, 0, 0, img.width, img.height, centerShift_x, centerShift_y, img.width * ratio, img.height * ratio);\n      setUploadImage(false);\n    };\n\n    img.src = imageSource;\n  } //Save image\n\n\n  if (saveImage) {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const lineart = lineartRef.current;\n    const lineCtx = lineart.getContext(\"2d\");\n    const saveCanvas = saveRef.current;\n    const saveCanvasCtx = saveCanvas.getContext(\"2d\");\n    let download = new Image();\n    saveCanvasCtx.drawImage(ctx, 0, 0);\n    saveCanvasCtx.drawImage(lineCtx, 0, 0);\n    let downloadSource = saveCanvas.toDataURL(\"image/png\");\n    download.src = downloadSource;\n    setSaveImage(false);\n  } //Clear canvas\n\n\n  if (clearCanvas) {\n    const canvas = canvasRef.current;\n    const ctx = ctxRef.current;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    setUndoArr([]);\n    setClearCanvas(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"homepage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: saveRef,\n        className: \"homepage__save\",\n        width: 1000,\n        height: 500\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: lineartRef,\n        className: \"homepage__lineart\",\n        width: 1000,\n        height: 500\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"homepage__canvas\",\n        ref: canvasRef,\n        onMouseDown: startDraw,\n        onMouseUp: endDraw,\n        onMouseMove: draw,\n        onClick: dot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PaintTools, {\n        setBrushActive: setBrushActive,\n        setEraserActive: setEraserActive,\n        setLineWidth: setLineWidth,\n        setStrokeStyle: setStrokeStyle,\n        setEraserWidth: setEraserWidth,\n        setClearCanvas: setClearCanvas,\n        setUndo: setUndo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        onChange: handleUploadImage,\n        for: \"upload-image\",\n        className: \"homepage__button--up\",\n        children: [\"Upload Image\", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"upload-image\",\n          type: \"file\",\n          accept: \"image/*\",\n          name: \"upload-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleDownloadImage,\n        className: \"homepage__button--down\",\n        text: \"Download Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSaveImage,\n        className: \"homepage__button--save\",\n        text: \"Save Image To Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"AL6TPhdZ2aud1ojHnyzNjPMUpnA=\");\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["U:/CAREER/BrainStation/Projects/christopher-mcgregor-capstone/client/src/components/Main/Main.js"],"names":["React","useRef","useEffect","useState","PaintTools","Button","Main","canvasRef","ctxRef","lineartRef","saveRef","brushActive","setBrushActive","eraserActive","setEraserActive","isDrawing","setIsDrawing","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","eraserWidth","setEraserWidth","undo","setUndo","undoArr","setUndoArr","clearCanvas","setClearCanvas","uploadImage","setUploadImage","imageSource","setImageSource","saveImage","setSaveImage","canvas","current","ctx","getContext","lineCap","lineJoin","imageSmoothingEnabled","mx","my","getMouse","event","rect","getBoundingClientRect","scaleX","width","scaleY","height","clientX","left","clientY","top","points","splice","clearRect","forEach","path","mode","globalCompositeOperation","stroke","beginPath","moveTo","x","y","i","length","lineTo","startDraw","endDraw","closePath","console","log","draw","push","dot","handleUploadImage","URL","createObjectURL","target","files","handleDownloadImage","handleSaveImage","lineart","lineCtx","img","Image","onload","hRatio","vRatio","ratio","Math","min","centerShift_x","centerShift_y","drawImage","src","saveCanvas","saveCanvasCtx","download","downloadSource","toDataURL"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport PaintTools from \"../PaintTools/PaintTools\";\r\nimport Button from \"../Button/Button\";\r\nimport \"./Main.scss\";\r\n\r\nexport default function Main() {\r\n  //Setting initial state and references for canvas\r\n  const canvasRef = useRef(null);\r\n  const ctxRef = useRef(null);\r\n  const lineartRef = useRef(null);\r\n  const saveRef = useRef(null);\r\n  let [brushActive, setBrushActive] = useState(true);\r\n  let [eraserActive, setEraserActive] = useState(false);\r\n  let [isDrawing, setIsDrawing] = useState(false);\r\n  let [strokeStyle, setStrokeStyle] = useState(\"black\");\r\n  let [lineWidth, setLineWidth] = useState(3);\r\n  let [eraserWidth, setEraserWidth] = useState(3);\r\n  let [undo, setUndo] = useState(false);\r\n  let [undoArr, setUndoArr] = useState([]);\r\n  let [clearCanvas, setClearCanvas] = useState(false);\r\n  let [uploadImage, setUploadImage] = useState(false);\r\n  let [imageSource, setImageSource] = useState(\"\");\r\n  let [saveImage, setSaveImage] = useState(false);\r\n\r\n  //useEffect hook for canvas and tools\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.lineCap = \"round\";\r\n    ctx.lineJoin = \"round\";\r\n    ctx.strokeStyle = strokeStyle;\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.eraserWidth = eraserWidth;\r\n    ctx.imageSmoothingEnabled = false;\r\n    ctxRef.current = ctx;\r\n  }, [strokeStyle, lineWidth, eraserWidth]);\r\n\r\n  //Get mouse location to keep mouse position in canvas on resize\r\n  let mx = 0;\r\n  let my = 0;\r\n  const getMouse = (event) => {\r\n    const canvas = canvasRef.current;\r\n    const rect = canvas.getBoundingClientRect();\r\n    let scaleX = canvas.width / rect.width;\r\n    let scaleY = canvas.height / rect.height;\r\n    mx = (event.clientX - rect.left) * scaleX;\r\n    my = (event.clientY - rect.top) * scaleY;\r\n  };\r\n\r\n  //Undo if statement\r\n  let points = [];\r\n  if (undo) {\r\n    const canvas = canvasRef.current;\r\n    const ctx = ctxRef.current;\r\n    setUndoArr(undoArr.splice(-1, 1));\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    undoArr.forEach((path) => {\r\n      if (path[0].mode === \"draw\") {\r\n        ctx.globalCompositeOperation = \"source-over\";\r\n        ctx.strokeStyle = path.stroke;\r\n        ctx.beginPath();\r\n        ctx.moveTo(path[0].x, path[0].y);\r\n        for (let i = 1; i < path.length; i++) {\r\n          ctx.lineTo(path[i].x, path[i].y);\r\n        }\r\n        ctx.stroke();\r\n      }\r\n      if (path[0].mode === \"erase\") {\r\n        ctx.globalCompositeOperation = \"destination-out\";\r\n        ctx.strokeStyle = \"rgba(255,255,255,1)\";\r\n        for (let i = 1; i < path.length; i++) {\r\n          ctx.lineTo(path[i].x, path[i].y);\r\n        }\r\n        ctx.stroke();\r\n      }\r\n    });\r\n    setUndo(false);\r\n  }\r\n\r\n  //Start drawing function\r\n  const startDraw = (event) => {\r\n    getMouse(event);\r\n    ctxRef.current.beginPath();\r\n    ctxRef.current.moveTo(mx, my);\r\n    setIsDrawing(true);\r\n  };\r\n\r\n  //End drawing function\r\n  const endDraw = (event) => {\r\n    getMouse(event);\r\n    ctxRef.current.closePath();\r\n    setUndoArr([...undoArr, points]);\r\n    console.log(undoArr);\r\n    points = [];\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  //Drawing function\r\n  const draw = (event) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    const ctx = ctxRef.current;\r\n    getMouse(event);\r\n    if (brushActive) {\r\n      ctx.globalCompositeOperation = \"source-over\";\r\n      ctx.strokeStyle = strokeStyle;\r\n      points.push({ x: mx, y: my, mode: \"draw\", stroke: ctx.strokeStyle });\r\n      ctx.lineTo(mx, my);\r\n      ctx.stroke();\r\n    }\r\n    if (eraserActive) {\r\n      points.push({ x: mx, y: my, mode: \"erase\" });\r\n      ctx.globalCompositeOperation = \"destination-out\";\r\n      ctx.strokeStyle = \"rgba(255,255,255,1)\";\r\n      ctx.lineTo(mx, my);\r\n      ctx.stroke();\r\n    }\r\n  };\r\n\r\n  const dot = (event) => {\r\n    getMouse(event);\r\n    const ctx = ctxRef.current;\r\n    if (brushActive) {\r\n      ctx.globalCompositeOperation = \"source-over\";\r\n      ctx.strokeStyle = strokeStyle;\r\n    }\r\n    if (eraserActive) {\r\n      ctx.globalCompositeOperation = \"destination-out\";\r\n      ctx.strokeStyle = \"rgba(255,255,255,1)\";\r\n    }\r\n    ctx.beginPath();\r\n    ctx.moveTo(mx, my);\r\n    ctx.lineTo(mx, my);\r\n    ctx.stroke();\r\n  };\r\n\r\n  //Loading and saving image handlers\r\n  const handleUploadImage = (event) => {\r\n    console.log(\"fired\");\r\n    setImageSource(URL.createObjectURL(event.target.files[0]));\r\n    setUploadImage(true);\r\n  };\r\n\r\n  const handleDownloadImage = () => {\r\n    setUploadImage(true);\r\n  };\r\n\r\n  const handleSaveImage = () => {\r\n    setSaveImage(true);\r\n  };\r\n\r\n  //Upload image\r\n  if (uploadImage) {\r\n    const lineart = lineartRef.current;\r\n    const lineCtx = lineart.getContext(\"2d\");\r\n    let img = new Image();\r\n    img.onload = () => {\r\n      let hRatio = lineart.width / img.width;\r\n      let vRatio = lineart.height / img.height;\r\n      let ratio = Math.min(hRatio, vRatio);\r\n      var centerShift_x = (lineart.width - img.width * ratio) / 2;\r\n      var centerShift_y = (lineart.height - img.height * ratio) / 2;\r\n      lineCtx.clearRect(0, 0, lineart.width, lineart.height);\r\n      lineCtx.drawImage(\r\n        img,\r\n        0,\r\n        0,\r\n        img.width,\r\n        img.height,\r\n        centerShift_x,\r\n        centerShift_y,\r\n        img.width * ratio,\r\n        img.height * ratio\r\n      );\r\n      setUploadImage(false);\r\n    };\r\n    img.src = imageSource;\r\n  }\r\n\r\n  //Save image\r\n  if (saveImage) {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const lineart = lineartRef.current;\r\n    const lineCtx = lineart.getContext(\"2d\");\r\n    const saveCanvas = saveRef.current;\r\n    const saveCanvasCtx = saveCanvas.getContext(\"2d\");\r\n    let download = new Image();\r\n\r\n    saveCanvasCtx.drawImage(ctx,0,0);\r\n    saveCanvasCtx.drawImage(lineCtx,0,0);\r\n    let downloadSource = saveCanvas.toDataURL(\"image/png\");\r\n    download.src = downloadSource;\r\n    \r\n    setSaveImage(false);\r\n  }\r\n\r\n  //Clear canvas\r\n  if (clearCanvas) {\r\n    const canvas = canvasRef.current;\r\n    const ctx = ctxRef.current;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    setUndoArr([]);\r\n    setClearCanvas(false);\r\n  }\r\n\r\n  return (\r\n    <section className=\"homepage\">\r\n      <div>\r\n        <canvas\r\n          ref={saveRef}\r\n          className=\"homepage__save\"\r\n          width={1000}\r\n          height={500}\r\n        ></canvas>\r\n        <canvas\r\n          ref={lineartRef}\r\n          className=\"homepage__lineart\"\r\n          width={1000}\r\n          height={500}\r\n        ></canvas>\r\n        <canvas\r\n          className=\"homepage__canvas\"\r\n          ref={canvasRef}\r\n          onMouseDown={startDraw}\r\n          onMouseUp={endDraw}\r\n          onMouseMove={draw}\r\n          onClick={dot}\r\n        ></canvas>\r\n        <PaintTools\r\n          setBrushActive={setBrushActive}\r\n          setEraserActive={setEraserActive}\r\n          setLineWidth={setLineWidth}\r\n          setStrokeStyle={setStrokeStyle}\r\n          setEraserWidth={setEraserWidth}\r\n          setClearCanvas={setClearCanvas}\r\n          setUndo={setUndo}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label\r\n          onChange={handleUploadImage}\r\n          for=\"upload-image\"\r\n          className=\"homepage__button--up\"\r\n        >\r\n          Upload Image\r\n          <input\r\n            id=\"upload-image\"\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            name=\"upload-image\"\r\n          ></input>\r\n        </label>\r\n        <Button\r\n          onClick={handleDownloadImage}\r\n          className=\"homepage__button--down\"\r\n          text=\"Download Image\"\r\n        />\r\n        <Button\r\n          onClick={handleSaveImage}\r\n          className=\"homepage__button--save\"\r\n          text=\"Save Image To Profile\"\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}