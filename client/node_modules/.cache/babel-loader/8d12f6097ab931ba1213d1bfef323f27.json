{"ast":null,"code":"var _jsxFileName = \"U:\\\\CAREER\\\\BrainStation\\\\Projects\\\\christopher-mcgregor-capstone\\\\client\\\\src\\\\components\\\\Canvas\\\\Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"./Canvas.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Canvas(props) {\n  _s();\n\n  //Setting initial state and reference for canvas\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  let [isDrawing, setIsDrawing] = useState(false);\n  let [strokeStyle, setStrokeStyle] = useState(\"black\");\n  let [lineWidth, setLineWidth] = useState(3); //useEffect hook for brush strokes\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    let mx = 0;\n    let my = 0;\n    console.log(mx);\n    console.log(my);\n    ctx.canvas.width = window.innerWidth - 80;\n    ctx.canvas.height = window.innerWidth / 2;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = lineWidth;\n    ctx.imageSmoothingEnabled = false;\n    ctxRef.current = ctx;\n  }, [strokeStyle, lineWidth]); //Get mouse location\n\n  const getMouse = event => {\n    const canvas = canvasRef.current;\n    mx = event.clientX - canvas.offsetLeft;\n    my = event.clientY - canvas.offsetTop;\n  }; //Start drawing function\n\n\n  const startDraw = event => {\n    getMouse(event);\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(mx, my);\n    setIsDrawing(true);\n  }; //End drawing function\n\n\n  const endDraw = event => {\n    getMouse(event);\n    ctxRef.current.closePath();\n    setIsDrawing(false);\n  }; //Drawing function\n\n\n  const draw = event => {\n    if (!isDrawing) {\n      return;\n    }\n\n    getMouse(event);\n    ctxRef.current.lineTo(mx, my);\n    ctxRef.current.stroke();\n  }; //Clear canvas check\n\n\n  if (props.clearCanvas) {\n    const canvas = canvasRef.current;\n    const ctx = ctxRef.current;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  } //Render component with all mouse events and references\n\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    onMouseDown: startDraw,\n    onMouseUp: endDraw,\n    onMouseMove: draw,\n    className: \"homepage__canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Canvas, \"dKn5lr5Sh99IMHej1H2A3IomqRE=\");\n\n_c = Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["U:/CAREER/BrainStation/Projects/christopher-mcgregor-capstone/client/src/components/Canvas/Canvas.js"],"names":["React","useRef","useEffect","useState","Canvas","props","canvasRef","ctxRef","isDrawing","setIsDrawing","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","canvas","current","ctx","getContext","mx","my","console","log","width","window","innerWidth","height","lineCap","lineJoin","imageSmoothingEnabled","getMouse","event","clientX","offsetLeft","clientY","offsetTop","startDraw","beginPath","moveTo","endDraw","closePath","draw","lineTo","stroke","clearCanvas","clearRect"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport \"./Canvas.scss\";\r\n\r\nexport default function Canvas(props) {\r\n  //Setting initial state and reference for canvas\r\n  const canvasRef = useRef(null);\r\n  const ctxRef = useRef(null);\r\n  let [isDrawing, setIsDrawing] = useState(false);\r\n  let [strokeStyle, setStrokeStyle] = useState(\"black\");\r\n  let [lineWidth, setLineWidth] = useState(3);\r\n\r\n  //useEffect hook for brush strokes\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    let mx = 0;\r\n    let my = 0;\r\n    console.log(mx)\r\n    console.log(my)\r\n    ctx.canvas.width = window.innerWidth - 80;\r\n    ctx.canvas.height = window.innerWidth / 2;\r\n    ctx.lineCap = \"round\";\r\n    ctx.lineJoin = \"round\";\r\n    ctx.strokeStyle = strokeStyle;\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.imageSmoothingEnabled = false;\r\n    ctxRef.current = ctx;\r\n  }, [strokeStyle, lineWidth]);\r\n\r\n  //Get mouse location\r\n  \r\n  const getMouse = (event) => {\r\n    \r\n    const canvas = canvasRef.current;\r\n    mx = event.clientX - canvas.offsetLeft;\r\n    my = event.clientY - canvas.offsetTop;\r\n  };\r\n\r\n  //Start drawing function\r\n  const startDraw = (event) => {\r\n    getMouse(event)\r\n    ctxRef.current.beginPath();\r\n    ctxRef.current.moveTo(mx, my);\r\n    setIsDrawing(true);\r\n  };\r\n\r\n  //End drawing function\r\n  const endDraw = (event) => {\r\n    getMouse(event)\r\n    ctxRef.current.closePath();\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  //Drawing function\r\n  const draw = (event) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    getMouse(event);\r\n    ctxRef.current.lineTo(mx, my);\r\n    ctxRef.current.stroke();\r\n  };\r\n\r\n  //Clear canvas check\r\n  if (props.clearCanvas) {\r\n    const canvas = canvasRef.current;\r\n    const ctx = ctxRef.current;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  }\r\n\r\n  //Render component with all mouse events and references\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      onMouseDown={startDraw}\r\n      onMouseUp={endDraw}\r\n      onMouseMove={draw}\r\n      className=\"homepage__canvas\"\r\n    ></canvas>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}