{"ast":null,"code":"var _jsxFileName = \"U:\\\\CAREER\\\\BrainStation\\\\Projects\\\\christopher-mcgregor-capstone\\\\client\\\\src\\\\components\\\\Canvas\\\\Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"./Canvas.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Canvas(props) {\n  _s();\n\n  //Setting initial state and reference for canvas\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  let [isDrawing, setIsDrawing] = useState(false);\n  let [strokeStyle, setStrokeStyle] = useState(\"black\");\n  let [lineWidth, setLineWidth] = useState(3); //useEffect hook for brush strokes\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.canvas.width = window.innerWidth - 80;\n    ctx.canvas.height = window.innerWidth / 2;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = lineWidth;\n    ctx.imageSmoothingEnabled = false;\n    ctxRef.current = ctx;\n  }, [strokeStyle, lineWidth]); //Start drawing function\n\n  const startDraw = event => {\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(event.nativeEvent.offsetX, event.nativeEvent.offsetY);\n    setIsDrawing(true);\n  }; //End drawing function\n\n\n  const endDraw = () => {\n    ctxRef.current.closePath();\n    setIsDrawing(false);\n  }; //Drawing function\n\n\n  const draw = event => {\n    if (!isDrawing) {\n      return;\n    }\n\n    ctxRef.current.lineTo(event.nativeEvent.offsetX, event.nativeEvent.offsetY);\n    ctxRef.current.stroke();\n  }; //Clear canvas check\n\n\n  if (props.clearCanvas) {\n    const canvas = canvasRef.current;\n    const ctx = ctxRef.current;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  } //Render component with all mouse events and references\n\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    onMouseDown: startDraw,\n    onMouseUp: endDraw,\n    onMouseMove: draw,\n    className: \"homepage__canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Canvas, \"dKn5lr5Sh99IMHej1H2A3IomqRE=\");\n\n_c = Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["U:/CAREER/BrainStation/Projects/christopher-mcgregor-capstone/client/src/components/Canvas/Canvas.js"],"names":["React","useRef","useEffect","useState","Canvas","props","canvasRef","ctxRef","isDrawing","setIsDrawing","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","canvas","current","ctx","getContext","width","window","innerWidth","height","lineCap","lineJoin","imageSmoothingEnabled","startDraw","event","beginPath","moveTo","nativeEvent","offsetX","offsetY","endDraw","closePath","draw","lineTo","stroke","clearCanvas","clearRect"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport \"./Canvas.scss\";\r\n\r\nexport default function Canvas(props) {\r\n  //Setting initial state and reference for canvas\r\n  const canvasRef = useRef(null);\r\n  const ctxRef = useRef(null);\r\n  let [isDrawing, setIsDrawing] = useState(false);\r\n  let [strokeStyle, setStrokeStyle] = useState(\"black\");\r\n  let [lineWidth, setLineWidth] = useState(3);\r\n\r\n  //useEffect hook for brush strokes\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.canvas.width = window.innerWidth - 80;\r\n    ctx.canvas.height = window.innerWidth / 2;\r\n    ctx.lineCap = \"round\";\r\n    ctx.lineJoin = \"round\";\r\n    ctx.strokeStyle = strokeStyle;\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.imageSmoothingEnabled = false;\r\n    ctxRef.current = ctx;\r\n  }, [strokeStyle, lineWidth]);\r\n\r\n  //Start drawing function\r\n  const startDraw = (event) => {\r\n    ctxRef.current.beginPath();\r\n    ctxRef.current.moveTo(event.nativeEvent.offsetX, event.nativeEvent.offsetY);\r\n    setIsDrawing(true);\r\n  };\r\n\r\n  //End drawing function\r\n  const endDraw = () => {\r\n    ctxRef.current.closePath();\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  //Drawing function\r\n  const draw = (event) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    ctxRef.current.lineTo(event.nativeEvent.offsetX, event.nativeEvent.offsetY);\r\n    ctxRef.current.stroke();\r\n  };\r\n\r\n  //Clear canvas check\r\n    if (props.clearCanvas) {\r\n      const canvas = canvasRef.current;\r\n      const ctx = ctxRef.current;\r\n      ctx.clearRect(0,0,canvas.width, canvas.height);\r\n      \r\n    }\r\n\r\n  //Render component with all mouse events and references\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      onMouseDown={startDraw}\r\n      onMouseUp={endDraw}\r\n      onMouseMove={draw}\r\n      className=\"homepage__canvas\"\r\n    ></canvas>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}